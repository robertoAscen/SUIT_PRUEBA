/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eneri.testroom.files;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;

/**
 *
 * @author Roberto
 */
public class HandlerFiles 
{
    private JFileChooser jfChooser;
    private File fileName;
    private FileWriter fileWrite = null;
    private JTextArea jtArea;
    private JPanel jpMessages;
    private String path;
    
    private FileReader fr;
    private BufferedReader br;
    private PrintWriter pw;
    private String strContenido;
    private String[] guardarStr = new String[143];
    
    public HandlerFiles(JTextArea jtArea)
    {
        this.jtArea = jtArea;
    }
    
    public void writeLoader(String[] strChange)
    {
        try 
        {
            fileName = new File("c:/Users/'Roberto Ascencio'/Downloads/FWLOADER/Loader.hex");
            PrintWriter pw = new PrintWriter(new FileWriter(fileName));
            for(int i=0; i<strChange.length; i++)
            {
                pw.println(strChange[i]);
            }
            pw.close();
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(HandlerFiles.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public String[] modifyLoader(String SnToChange)
    {
        try 
        {
            //String guardarStr;
            fileName = new File("c:/Users/'Roberto Ascencio'/Downloads/FWLOADER/Loader.hex");
            fr = new FileReader(fileName);
            br = new BufferedReader(fr);
            int cont = 0;
            while((strContenido = br.readLine())!=null)
            {
                if(cont == 0)
                {
                    guardarStr[cont] = strContenido.substring(0, 9)+SnToChange+strContenido.substring(25, 71);
                }
                else
                {
                    guardarStr[cont] = strContenido;
                }                
                cont++;
            }
            br.close();
        } 
        catch (FileNotFoundException ex) 
        {
            Logger.getLogger(HandlerFiles.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(HandlerFiles.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return guardarStr;
    }
    
    /*public String readLoader()
    {
        BufferedReader br = new BufferedReader(new FileReader("h:/NETBEANS/TESTROOM/src/main/resources/FWLOADER/Copiar (1) Loader.hex"));
        PrintWriter pw = new PrintWriter(new FileWriter(tempFile));
        String line ;
        int cont = 0;
        //Read from the original file and write to the new 
        //unless content matches data to be removed.
        while ((line = br.readLine()) != null) 
        {
            //System.out.println(line);
            if (++cont == 1) 
            {
                //PrintWriter pw = new PrintWriter(new FileWriter(tempFile));
                pw.println(line.substring(0, 9)+lineToChange+line.substring(25, 71));
                pw.flush();
                pw.close();
            }
            else
            {
                //System.out.println(line);
                //PrintWriter pw = new PrintWriter(new FileWriter(tempFile));
                pw.println(line);
                pw.flush();                    
            }
        }
        pw.close();
        br.close();
 
        }
    }*/
    
    private void writeFile(String path)
    {
        this.path = path;
        fileName = new File(path); 
        if(fileName.exists())
        {
            int request = JOptionPane.showConfirmDialog(null, "Replace existing file?");
            switch(request)
            {
                case 0:
                    try 
                    {
                        fileWrite = new FileWriter(fileName);
                        BufferedWriter bw = new BufferedWriter(fileWrite);                        
                        bw.append(jtArea.getText());
                        bw.newLine();
                        bw.close();
                    } 
                    catch (IOException ex) 
                    {
                        Logger.getLogger(HandlerFiles.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case 1:
                    break;
                case 2:
                    break;            
            }           
        }
        else
        {
            try 
            {
                fileWrite = new FileWriter(fileName);
                BufferedWriter bw = new BufferedWriter(fileWrite);                        
                bw.append(jtArea.getText());
                bw.newLine();
                bw.close();
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(HandlerFiles.class.getName()).log(Level.SEVERE, null, ex);
            }            
        }
    }
    
    public void xportFile()
    {
        jfChooser = new JFileChooser();
        jpMessages = new JPanel();
        jfChooser.showSaveDialog(jpMessages);
        if(jfChooser.getSelectedFile() != null)
        {
            writeFile(jfChooser.getSelectedFile()+".txt");
            JOptionPane.showMessageDialog(null, "Saved File");
        }
    }   
    
    public void OpenFileHex()
    {
        jfChooser = new JFileChooser();
        jpMessages = new JPanel();
        jfChooser.showOpenDialog(jpMessages);
    }
}
